<html>

<head>
    <title>PARD UI</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <link href="css/pard.css" rel="stylesheet" type="text/css" />
    <!-- ECharts单文件引入 -->
    <script src="jquery.min.js"></script>
    <script src="echarts.min.js"></script>
</head>

<body style="text-align:center; width: 1254px; height: 810px">

    <br></br>
    <h1>标签化原型系统功能展示</h1>
    <br></br>
    <div id="latency_frame" style="float: left;margin-left: 2%;margin-top: 0px;width: 200px; border: 1px solid;height:  200px;">
        <!--  
        <span style="float: left;margin-left:5px; margin-top: 10px; margin-bottom: 7px">应用名称：</span>
    <br><span style="margin-top: 5px; float:left">Memcached</span></br>
    <br><span style="float:  left;margin-left: 5px;">响应延迟(ms)：</span></br>
    <br><span style="float:left">100</span>    </br>
   -->
    </div>
    <div name="pard_demo" class="pard_demo">

        <!-- CPU Core Name -->
        <div name="div_cpu_core_title" class="box_core_title_group">
            <div class="box_core_text box_core_text_size">
                <b>Core 0</b>
            </div>
            <div class="box_core_text box_core_text_size">
                <b>Core 1</b>
            </div>
            <div class="box_core_text box_core_text_size">
                <b>Core 2</b>
            </div>
            <div class="box_core_text box_core_text_size">
                <b>Core 3</b>
            </div>
        </div>

        <!-- CPU Core Image -->
        <div name="div_cpu_core" class="box_core_group">
            <div id="core_0" class="box_core_off box_norm_size"></div>
            <div id="core_0" class="box_core_off box_norm_size"></div>
            <div id="core_0" class="box_core_off box_norm_size"></div>
            <div id="core_0" class="box_core_off box_norm_size"></div>
        </div>

        <div name="div_cpu_bus" class="box_core_bus_group">
            <div class="box_core_bus box_core_buse_size"></div>
            <div class="box_core_bus box_core_buse_size"></div>
            <div class="box_core_bus box_core_buse_size"></div>
            <div class="box_core_bus box_core_buse_size"></div>
        </div>

        <!-- CPU Core NoC -->
        <div class="box_hbus">
            <hr width=600 size=5 color=#000000>
        </div>
        <div class="box_vbus"></div>

        <!-- CPU Cache Usage -->
        <div id="figure_cache_usage" class="box_cache"></div>
        <div class="box_vbus"></div>
        <!-- CPU memor Bandwidth Usage -->
        <div id="figure_mem_usage" class="box_mem"></div>
        <div style="height:100px;"></div>

        <!--  <script src="echarts-all.js"></script> -->
        <script type="text/javascript">
        
        
            $.getJSON('config.json?random='+Math.random(),function (config) {
                
            
            $('h1').text(config.main_heading);
            var myChart = echarts.init(document.getElementById('figure_cache_usage'));
            option = {
                tooltip: {
                    trigger: 'axis',
                    axisPointer: {            // 坐标轴指示器，坐标轴触发有效
                        type: 'shadow'        // 默认为直线，可选为：'line' | 'shadow'
                    }
                },
                grid: {
                    top: '0%',
                    bottom: '10%',
                    left: '5%',
                    right: '2%',
                },
                toolbox: {
                    show: true,
                    feature: {
                        //mark : {show: true},
                        //dataView : {show: true, readOnly: false},
                        //magicType : {show: true, type: ['line', 'bar', 'stack', 'tiled']},
                        //restore : {show: true},
                        //saveAsImage : {show: true}
                    }
                },
                calculable: true,
                xAxis: [
                    {
                        type: 'value',
                        boundaryGap: [0, 0],
                        splitNumber: 10
                    }
                ],
                yAxis: [
                    {
                        type: 'category',
                        data: [config.cache_data_name],
                        splitNumber: 4,
                        name: 'chache(M)',
                        nameLocation: 'middle',
                        nameTextStyle: {
                            color: "#999999",
                            fontSize: 20, 
                            fontWeight: 'bold',
                            fontFamily: "Arial",
                            padding: [50, 50, 30, 50],
                        },
                    }
                ],
                series: [
                    {
                        name: 'core0',
                        type: 'bar',
                        stack: '总量',
                        itemStyle: {
                            normal: {
                                label: {
                                    show: true,
                                    position: 'inside',
                                    fontSize: 24
                                }
                            }
                        },
                        data: [1]
                    },
                    {
                        name: 'core1',
                        type: 'bar',
                        stack: '总量',
                        itemStyle: {
                            normal: {
                                label: {
                                    show: true,
                                    position: 'inside',
                                    fontSize: 24
                                }
                            }
                        },
                        data: [2]
                    },
                    {
                        name: 'core2',
                        type: 'bar',
                        stack: '总量',
                        itemStyle: {
                            normal: {
                                label: {
                                    show: true,
                                    position: 'inside',
                                    fontSize: 24
                                }
                            }
                        },
                        data: [3]
                    },
                    {
                        name: 'core3',
                        type: 'bar',
                        stack: '总量',
                        itemStyle: {
                            normal: {
                                label: {
                                    show: true,
                                    position: 'inside',
                                    fontSize: 24
                                }
                            }
                        },
                        data: [4],
                        barWidth: 230,
                    },
                    {
                        name: 'idle',
                        type: 'bar',
                        stack: '总量',
                        itemStyle: {
                            normal: {
                                label: {
                                    show: false,
                                    position: 'inside',
                                    fontSize: 24
                                },
                                color: 'rgba(128, 128, 128, 0.1)'
                            }
                        },
                        data: [6]
                    }
                ]
            };

            myChart.setOption(option);

            var myChart1 = echarts.init(document.getElementById('figure_mem_usage'));//定义折线图显示的位置对象 

            var data_x = [];
            var data_core0 = [];
            var data_core1 = [];
            var data_core2 = [];
            var data_core3 = [];

            var option1 = {
                /*
                title: {
                    text: '内存使用'
                },
                */
                tooltip: {
                    trigger: 'axis',
                    axisPointer: {
                        type: 'cross',
                        label: {
                            backgroundColor: '#6a7985'
                        }
                    }
                },
                /*
                legend: {
                    data: ['core0', 'core1', 'core2', 'core3']
                },
                */

                grid: {
                    left: '5%',
                    right: '4%',
                    bottom: '12%',
                    containLabel: true
                },
                xAxis: [{
                    name: config.mem_x_name,
                    nameLocation: 'middle',
                    nameTextStyle: {
                        color: "#999999",
                        fontSize: 20, // 这个会影响坐标轴的字体大小，不懂为什么
                        fontWeight: 'bold',
                        fontFamily: "Arial",
                        //padding: [50, 50, 30, 50],
                    },
                    type: 'category',
                    boundaryGap: false,
                    //data: ['周一', '周二', '周三', '周四', '周五', '周六', '周日']
                    axisLabel: {
                        rotate: 70
                    }
                }],
                yAxis: [{
                    name: config.mem_y_name,
                    nameLocation: 'middle',
                    nameTextStyle: {
                        color: "#999999",
                        fontSize: 20, 
                        fontWeight: 'bold',
                        fontFamily: "Arial",
                        padding: [50, 50, 30, 50],
                    },
                    type: 'value',
                    max: config.mem_y_max,
                }],
                series: [
                    {
                        name: 'core0',
                        type: 'line',
                        stack: '总量',
                        areaStyle: {
                            normal: {}
                        },
                        //data: [220, 182, 191, 234, 290, 330, 310]
                    },
                    {
                        name: 'core1',
                        type: 'line',
                        stack: '总量',
                        areaStyle: {
                            normal: {}
                        },
                        //data: [150, 232, 201, 154, 190, 330, 410]
                    },
                    {
                        name: 'core2',
                        type: 'line',
                        stack: '总量',
                        areaStyle: {
                            normal: {}
                        },
                        //data: [320, 332, 301, 334, 390, 330, 320]
                    },
                    {
                        name: 'core3',
                        type: 'line',
                        stack: '总量',
                        label: {
                            normal: {
                                show: false,
                                position: 'top'
                            }
                        },
                        areaStyle: {
                            normal: {}
                        },
                        //data: [820, 932, 901, 934, 1290, 1330, 1320]
                    }
                ]
            };

            var colorlist = ['#B24036', '#334553', '#6F9FA7', '#C9856B'];
            //console.log(option.series[0].itemStyle.normal.color);
            //myChart1.setOption(option1);
            var fresh_interval = 1000;
            setInterval(function () {
                $.getJSON('data.json?random=' + Math.random(), function (json) {
                    var myDate = new Date();
                    //更新cpu
                    for (var i = 0; i < json.cpu_switch.length; i++) {
                        if (json.cpu_switch[i] == 0) {
                            $(".box_core_group div").eq(i).removeClass("box_core_on_" + i);
                            $(".box_core_group div").eq(i).addClass("box_core_off");
                        }
                        else {
                            $(".box_core_group div").eq(i).removeClass("box_core_off");
                            $(".box_core_group div").eq(i).addClass("box_core_on_" + i);
                        }
                    }

                    var cache_core0 = [];
                    cache_core0[0] = json.cache_usage[0];
                    var cache_core1 = [];
                    cache_core1[0] = json.cache_usage[1];
                    var cache_core2 = [];
                    cache_core2[0] = json.cache_usage[2];
                    var cache_core3 = [];
                    cache_core3[0] = json.cache_usage[3];
                    var cache_idle = [];
                    cache_idle[0] = 100 - json.cache_usage[0] - json.cache_usage[1] - json.cache_usage[2] - json.cache_usage[3];

                    option.series[0].data = cache_core0;
                    option.series[1].data = cache_core1;
                    option.series[2].data = cache_core2;
                    option.series[3].data = cache_core3;
                    option.series[4].data = cache_idle;

                    myChart.setOption(option);

                    if (data_x.length == config.mem_show_num) {
                        data_x.shift();
                        data_core0.shift();
                        data_core1.shift();
                        data_core2.shift();
                        data_core3.shift();
                    }

                    data_x.push('');
                    data_core0.push(json.mem_usage[0]);
                    data_core1.push(json.mem_usage[1]);
                    data_core2.push(json.mem_usage[2]);
                    data_core3.push(json.mem_usage[3]);

                    option1.xAxis[0].data = data_x;
                    option1.series[0].data = data_core0;
                    option1.series[1].data = data_core1;
                    option1.series[2].data = data_core2;
                    option1.series[3].data = data_core3;
                    option1.yAxis[0].max = json.mem_total;
                    myChart1.setOption(option1);
                    fresh_interval = json.refresh_interval;
                });
            }, config.mem_interval);


            var latencyChart = echarts.init(document.getElementById('latency_frame'));//定义折线图显示的位置对象 
            latency_option = {
                title: {
                    text: config.latency_title,
                    left: 'center'
                },
                tooltip: {
                    trigger: 'axis'
                },

                grid: {
                    left: '3%',
                    right: '4%',
                    bottom: '10%',
                    top: '17%',
                    containLabel: true
                },
                xAxis: {
                    type: 'category',
                    boundaryGap: false,
                    //data: ['周一', '周二', '周三', '周四', '周五', '周六', '周日']
                    name: config.latency_x_name,
                    nameLocation: 'middle',
                    nameTextStyle: {
                        color: "#999999",
                        fontSize: 14, 
                        fontWeight: 'bold',
                        fontFamily: "Arial",
                        //padding: [50, 50, 30, 50],
                    },
               },
                yAxis: {
                    type: 'value'
                },
                series: [
                    {
                        name: '响应延迟',
                        type: 'line',
                        stack: '总量',
                        data: [820, 932, 901, 934, 1290, 1330, 1320]
                    }
                ]
            };
            var latency_list = [];
            var latency_x_label = [];
            setInterval(function(){
                $.getJSON('latency.json?random=' + Math.random(),function (data) {
                        if (latency_list.length == config.latency_show_num){
                            latency_list.shift();
                            latency_x_label.shift();
                        }
                        latency_list.push(data.latency);
                        latency_x_label.push('');
                        latency_option.series[0].data = latency_list;
                        latency_option.xAxis.data = latency_x_label;
                        latencyChart.setOption(latency_option);
                });
            }, config.latency_interval);

        });
        </script>
    </div>

</body>

</html>